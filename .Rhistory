c(2,3,4)
sort(c(2,3,4))
sort(c(2,6,4))
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
event_type
event_type=="Protests"
n
n
Q
runApp()
event_type1
event_type1
runApp()
event_type
event_type
event_type=="Protests"
event_type=="Explosions/Remote violence"
event_type
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sprintf("<img src='icon/icons/war.png' width=30px><div class='jhr'>%s</div></img>", "Battles")
icon_list <- c(
sprintf("<img src='icon/icons/war.png' width=30px><div class='jhr'>%s</div></img>", "Battles"),
sprintf("<img src='icon/explosion.png' width=30px><div class='jhr'>%s</div></img>", "Explosions/Remote violence"),
sprintf("<img src='icon/icons/civil-right-movement.png' width=30px><div class='jhr'>%s</div></img>", "Protests"),
sprintf("<img src='icon/icons/strike.png' width=30px><div class='jhr'>%s</div></img>", "Riots"),
sprintf("<img src='icon/icons/strategic-plan.png' width=30px><div class='jhr'>%s</div></img>", "Strategic developments"),
sprintf("<img src='icon/bullying.png' width=30px><div class='jhr'>%s</div></img>", "Violence against civilians"),
)
icon_list <- c(
sprintf("<img src='icon/icons/war.png' width=30px><div class='jhr'>%s</div></img>", "Battles"),
sprintf("<img src='icon/explosion.png' width=30px><div class='jhr'>%s</div></img>", "Explosions/Remote violence"),
sprintf("<img src='icon/icons/civil-right-movement.png' width=30px><div class='jhr'>%s</div></img>", "Protests"),
sprintf("<img src='icon/icons/strike.png' width=30px><div class='jhr'>%s</div></img>", "Riots"),
sprintf("<img src='icon/icons/strategic-plan.png' width=30px><div class='jhr'>%s</div></img>", "Strategic developments"),
sprintf("<img src='icon/bullying.png' width=30px><div class='jhr'>%s</div></img>", "Violence against civilians")
)
runApp()
levels(as.factor(raw_data$event_type))
sort(levels(as.factor(raw_data$event_type)))
runApp()
runApp()
icon_list <- c(
sprintf("<img src='icon/war.png' width=30px><div class='jhr'>%s</div></img>", "Battles"),
sprintf("<img src='icon/explosion.png' width=30px><div class='jhr'>%s</div></img>", "Explosions/Remote violence"),
sprintf("<img src='icon/civil-right-movement.png' width=30px><div class='jhr'>%s</div></img>","Protests"),
sprintf("<img src='icon/strike.png' width=30px><div class='jhr'>%s</div></img>","Riots"),
sprintf("<img src='icon/strategic-plan.png' width=30px><div class='jhr'>%s</div></img>","Strategic developments"),
sprintf("<img src='icon/bullying.png' width=30px><div class='jhr'>%s</div></img>","Violence against civilians")
)
icon_list
runApp()
runApp()
runApp()
input$event_type_multi
input$event_type_multi
input$event_type
input$event_type_multi
input$event_type_multi_open
acciones()$event_type %in% input$event_type_multi
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
shiny::runApp()
runApp()
acciones()
runApp()
filtered()
filtered()@data
input$event_type
acciones()
acciones()$event_type
p
shiny::runApp()
shiny::runApp()
runApp()
input$map_draw_new_feature
?st_multipoint
?st_transform
crs = st_crs(x)
st_transform(st_cast(st_multipoint(matrix(unlist(feature$geometry$coordinates[[1]]), ncol=2)), 'POLYGON'), crs =4326)
pol <- st_transform(st_cast(st_multipoint(matrix(unlist(feature$geometry$coordinates[[1]]), ncol=2)), 'POLYGON'), crs =4326)
?st_multipoint
?st_project
?st_proj
pol <- st_transform(st_cast(st_multipoint(matrix(unlist(feature$geometry$coordinates[[1]]), ncol=2)), 'POLYGON'), crs=st_crs("4326"))
feature
?leafletCRS
?st_cast
crs(pol)
st_sfc(pol, crs="EPSG:3857")
st_intersection(result, pol_st)
st_intersects(result, pol_st)
?st_join
st_join(pol_st, result)
result %>% filter(st_intersects(geometry, pol_st)
)
result %>% filter(st_intersects(geometry, pol_st))
st_crs(geometry)
st_crs(result$geometry)
st_crs(pol_st)
result %>% filter(st_intersects(geometry, pol_st))
st_crs(resultÃ§)
st_crs(result)
st_crs(pol_st)
st_crs(result, 4326)
st_crs(result)
result %>% st_transform(4326)
st_sfc(result, crs=st_crs("EPSG:3847"))
result
class(result)
st_crs(result) <- 4326
result
st_intersects(result, pol)
shiny::runApp()
runApp()
runApp()
input$date_filter
filtered()
filtered()$timestammp
raw_data
raw_data$event_date
as.Date(raw_data$event_date)
parse_date(raw_data$event_date)
tidyr::parse_date(raw_data$event_date)
?as.Date
as.Date(raw_data$event_date, tryFormats= c('%d %B %Y'))
as.Date(raw_data$event_date, tryFormats= c('%d %B %Y'))
?between
filter_data[1]
date_filter[1]
input$date_filter
input$date_filter[1]
class(input$date_filter[1])
result
result$event_date_real
runApp()
result$event_date_real
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
